/*===========================================================================

  avrotest -- sender 

  This class sends several different instances of class Bear to the message
  broker, using Avro's SpecificDataWriter. 

  THIS IS NOT PRODUCTION-QUALITY CODE -- there is poor reuse of objects, and
  the exception handling is lamentable. I've tried to create the simplest,
  reasonably efficient implementation I could.

  Copyright (c)2021 Kevin Boone, GPL v3.0

  https://kevinboone.me/avrotest.html

===========================================================================*/
package net.kevinboone.apacheintegration.avrotest.sender;
// Model classes generated by tools:
import net.kevinboone.apacheintegration.avrotest.*; 

import java.io.*;
import java.util.*;
import javax.jms.*;
import org.apache.avro.*; 
import org.apache.avro.generic.*; 
import org.apache.avro.specific.*; 
import org.apache.avro.io.*; 
import org.apache.avro.file.*; 

public class Main
  {
  // The location of the schema file depends on the way that the 
  //   apicurio Maven plug-in is configured in pom.xml. In a real 
  //   application it might be better to download it at run-time.
  private final static String SCHEMA_FILE="target/Bear.avsc";
  private final static String PROPS_FILE="../avrotest.props";
  // SpecificDataWriter will be initialzed with the Bear class and
  //   schema
  private static SpecificDatumWriter bearDatumWriter;
  // Avro BinaryEncoder. We initialize this to null because it's used as
  //   the argument to the EncoderFactory, as well as the output. If it's
  //   non-null, as it will be after the first message, then Avro 
  //   re-initalizes it.
  private static BinaryEncoder encoder = null; 

/*===========================================================================

  sendMessage

  This method sends the byte array, which has been created by Avro's
  SpecificDataWriter, as a BytesMessage to the message broker.

  This is boilerplate JMS code, so I haven't documented it in detail.

  Note that in a real application we'd pool JMS connections, rather than
  creating a new one for each message.

===========================================================================*/
  public static void sendMessage (byte[] bytes, String brokerUri, 
               String brokerUser, String brokerPassword, String brokerQueue)
      throws JMSException
    {
    ConnectionFactory factory = 
            new org.apache.qpid.jms.JmsConnectionFactory (brokerUri);
    Connection conn = factory.createConnection (brokerUser, brokerPassword);

    Session session = conn.createSession (false, Session.AUTO_ACKNOWLEDGE);
    javax.jms.Queue queue = session.createQueue (brokerQueue);
    MessageProducer producer = session.createProducer (queue);
    BytesMessage message = session.createBytesMessage ();
    message.writeBytes (bytes);
    producer.send (message);
    producer.close();
    session.close();
    conn.close();
    }

/*===========================================================================

  encodeMessage

  This is where the Avro magic happens. This method takes an object of
  class Bear, and encodes it into a simple byte array.

===========================================================================*/
  public static byte[] encodeMessage (Bear bear)
      throws IOException
    {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    encoder = EncoderFactory.get().binaryEncoder (out, encoder);
    bearDatumWriter.write (bear, encoder);
    encoder.flush();
    byte[] bytes = out.toByteArray();
    out.close();
    return bytes;
    }

/*===========================================================================

  sendDataToQueue

  Encode the data to a byte array, then send it to the broker

===========================================================================*/
  public static void sendDataToQueue (Bear bear, String brokerUri, 
        String brokerUser, String brokerPassword, String brokerQueue)
     throws JMSException, IOException
    {
    byte[] bytes = encodeMessage (bear);
    sendMessage (bytes, brokerUri, brokerUser, brokerPassword, brokerQueue);
    }

/*===========================================================================

  main -- start here.

===========================================================================*/
  public static void main (String[] args)
      throws Exception
    {
    // Load the broker properties from the properties file
    Properties props = new Properties();
    props.load (new FileInputStream (PROPS_FILE));
    String brokerUri = props.getProperty ("broker_uri");
    String brokerUser = props.getProperty ("broker_user");
    String brokerPassword = props.getProperty ("broker_password");
    String brokerQueue = props.getProperty ("broker_queue");

    // Load the Avro schema from the JSON file
    Schema schema = new Schema.Parser().parse (new File (SCHEMA_FILE));

    // Create a SpecificDatumWriter for the schema we loaded, that will
    //   serialize objects of class Bear
    bearDatumWriter = new SpecificDatumWriter<Bear>(schema);

    // Send them bears!

    Bear paddington = new Bear();
    paddington.setName ("Paddington");
    paddington.setLocation ("32 Windsor Gardens");
    sendDataToQueue (paddington, brokerUri, brokerUser, 
        brokerPassword, brokerQueue);

    Bear rupert = new Bear();
    rupert.setName ("Rupert the Bear");
    rupert.setLocation ("Nutwood");
    sendDataToQueue (rupert, brokerUri, brokerUser, 
        brokerPassword, brokerQueue);

    Bear yogi = new Bear();
    yogi.setName ("Yogi Bear");
    yogi.setLocation ("Jellystone Park");
    sendDataToQueue (yogi, brokerUri, brokerUser, 
        brokerPassword, brokerQueue);
    }
  }

